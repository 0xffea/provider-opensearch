/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataStreamObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DataStreamParameters struct {

	// Name of the data stream to create, must have a matching
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// DataStreamSpec defines the desired state of DataStream
type DataStreamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataStreamParameters `json:"forProvider"`
}

// DataStreamStatus defines the observed state of DataStream.
type DataStreamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataStreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataStream is the Schema for the DataStreams API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opensearch}
type DataStream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataStreamSpec   `json:"spec"`
	Status            DataStreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataStreamList contains a list of DataStreams
type DataStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataStream `json:"items"`
}

// Repository type metadata.
var (
	DataStream_Kind             = "DataStream"
	DataStream_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataStream_Kind}.String()
	DataStream_KindAPIVersion   = DataStream_Kind + "." + CRDGroupVersion.String()
	DataStream_GroupVersionKind = CRDGroupVersion.WithKind(DataStream_Kind)
)

func init() {
	SchemeBuilder.Register(&DataStream{}, &DataStreamList{})
}
