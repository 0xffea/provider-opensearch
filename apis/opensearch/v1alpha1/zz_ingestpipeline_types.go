/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IngestPipelineObservation struct {

	// The name of the ingest pipeline.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IngestPipelineParameters struct {

	// The JSON body of the ingest pipeline
	// +kubebuilder:validation:Required
	Body *string `json:"body" tf:"body,omitempty"`

	// The name of the ingest pipeline
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// IngestPipelineSpec defines the desired state of IngestPipeline
type IngestPipelineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IngestPipelineParameters `json:"forProvider"`
}

// IngestPipelineStatus defines the observed state of IngestPipeline.
type IngestPipelineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IngestPipelineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IngestPipeline is the Schema for the IngestPipelines API. Provides an Elasticsearch ingest pipeline resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opensearch}
type IngestPipeline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IngestPipelineSpec   `json:"spec"`
	Status            IngestPipelineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IngestPipelineList contains a list of IngestPipelines
type IngestPipelineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IngestPipeline `json:"items"`
}

// Repository type metadata.
var (
	IngestPipeline_Kind             = "IngestPipeline"
	IngestPipeline_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IngestPipeline_Kind}.String()
	IngestPipeline_KindAPIVersion   = IngestPipeline_Kind + "." + CRDGroupVersion.String()
	IngestPipeline_GroupVersionKind = CRDGroupVersion.WithKind(IngestPipeline_Kind)
)

func init() {
	SchemeBuilder.Register(&IngestPipeline{}, &IngestPipelineList{})
}
