/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IndexTemplateObservation struct {

	// The name of the index template.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IndexTemplateParameters struct {

	// The JSON body of the index template.
	// +kubebuilder:validation:Required
	Body *string `json:"body" tf:"body,omitempty"`

	// The name of the index template.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// IndexTemplateSpec defines the desired state of IndexTemplate
type IndexTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndexTemplateParameters `json:"forProvider"`
}

// IndexTemplateStatus defines the observed state of IndexTemplate.
type IndexTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndexTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IndexTemplate is the Schema for the IndexTemplates API. Provides an Elasticsearch index template resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opensearch}
type IndexTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IndexTemplateSpec   `json:"spec"`
	Status            IndexTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndexTemplateList contains a list of IndexTemplates
type IndexTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IndexTemplate `json:"items"`
}

// Repository type metadata.
var (
	IndexTemplate_Kind             = "IndexTemplate"
	IndexTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IndexTemplate_Kind}.String()
	IndexTemplate_KindAPIVersion   = IndexTemplate_Kind + "." + CRDGroupVersion.String()
	IndexTemplate_GroupVersionKind = CRDGroupVersion.WithKind(IndexTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&IndexTemplate{}, &IndexTemplateList{})
}
